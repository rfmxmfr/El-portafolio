const Collection = require('../models/Collection');
const Design = require('../models/Design');

// @desc    Get all collections
// @route   GET /api/collections
// @access  Public
exports.getCollections = async (req, res) => {
  try {
    const collections = await Collection.find()
      .sort({ createdAt: -1 });
    
    res.json(collections);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Get single collection
// @route   GET /api/collections/:id
// @access  Public
exports.getCollectionById = async (req, res) => {
  try {
    const collection = await Collection.findById(req.params.id);
    
    if (!collection) {
      return res.status(404).json({ message: 'Collection not found' });
    }
    
    // Get designs for this collection
    const designs = await Design.find({ collectionId: collection._id });
    
    res.json({
      ...collection.toObject(),
      designs
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Create a collection
// @route   POST /api/collections
// @access  Private
exports.createCollection = async (req, res) => {
  try {
    const { title, description, tags, moodBoardUrl, sketchUrl, images } = req.body;
    
    const collection = await Collection.create({
      title,
      description,
      tags: tags || [],
      moodBoardUrl,
      sketchUrl,
      images: images || [],
      createdBy: req.user._id,
      lastUpdated: Date.now()
    });
    
    res.status(201).json(collection);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Update a collection
// @route   PUT /api/collections/:id
// @access  Private
exports.updateCollection = async (req, res) => {
  try {
    const { title, description, tags, moodBoardUrl, sketchUrl, images, status } = req.body;
    
    const collection = await Collection.findById(req.params.id);
    
    if (!collection) {
      return res.status(404).json({ message: 'Collection not found' });
    }
    
    // Update fields
    if (title !== undefined) collection.title = title;
    if (description !== undefined) collection.description = description;
    if (tags !== undefined) collection.tags = tags;
    if (moodBoardUrl !== undefined) collection.moodBoardUrl = moodBoardUrl;
    if (sketchUrl !== undefined) collection.sketchUrl = sketchUrl;
    if (images !== undefined) collection.images = images;
    if (status !== undefined) collection.status = status;
    
    collection.lastUpdated = Date.now();
    
    const updatedCollection = await collection.save();
    
    // Get designs for this collection
    const designs = await Design.find({ collectionId: updatedCollection._id });
    
    res.json({
      ...updatedCollection.toObject(),
      designs
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Delete a collection
// @route   DELETE /api/collections/:id
// @access  Private
exports.deleteCollection = async (req, res) => {
  try {
    const collection = await Collection.findById(req.params.id);
    
    if (!collection) {
      return res.status(404).json({ message: 'Collection not found' });
    }
    
    // Delete all designs associated with this collection
    await Design.deleteMany({ collectionId: collection._id });
    
    // Delete the collection
    await collection.remove();
    
    res.json({ message: 'Collection removed' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Publish a collection
// @route   PUT /api/collections/:id/publish
// @access  Private
exports.publishCollection = async (req, res) => {
  try {
    const collection = await Collection.findById(req.params.id);
    
    if (!collection) {
      return res.status(404).json({ message: 'Collection not found' });
    }
    
    collection.status = 'published';
    collection.lastUpdated = Date.now();
    
    const updatedCollection = await collection.save();
    
    // Get designs for this collection
    const designs = await Design.find({ collectionId: updatedCollection._id });
    
    res.json({
      ...updatedCollection.toObject(),
      designs
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Unpublish a collection
// @route   PUT /api/collections/:id/unpublish
// @access  Private
exports.unpublishCollection = async (req, res) => {
  try {
    const collection = await Collection.findById(req.params.id);
    
    if (!collection) {
      return res.status(404).json({ message: 'Collection not found' });
    }
    
    collection.status = 'draft';
    collection.lastUpdated = Date.now();
    
    const updatedCollection = await collection.save();
    
    // Get designs for this collection
    const designs = await Design.find({ collectionId: updatedCollection._id });
    
    res.json({
      ...updatedCollection.toObject(),
      designs
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};